``MyList`` Module

This module contains the constructor for the subclass MyList which inherits
from the super class list.

``Using MyList.print_sorted``

``var_name = MyList()`` The constructor builds a list object. This object
inherits all methods from the list class but has a new public method
print sorted. This takes the list of integers and sorts ascending
``var_name.print_sorted()``

Import module:
       >>> MyList = __import__('1-my_list').MyList

Checking for subclass:
	 >>> issubclass(MyList, list)
	 True

Empty List:
      >>> my_list = MyList()
      >>> my_list.print_sorted()
      []

Append to list:
       >>> my_list.append(4)
       >>> my_list.append(2)
       >>> my_list.append(3)
       >>> my_list.append(1)
       >>> print(my_list)
       [4, 2, 3, 1]

       >>> my_list.print_sorted()
       [1, 2, 3, 4]

Check sort method works:
      >>> my_list.print_sorted()
      [1, 2, 3, 4]

Check for already sorted array:
      >>> my_list.print_sorted()
      [1, 2, 3, 4]

Check for negative numbers:
      >>> my_list = MyList()
      >>> my_list.append(2)
      >>> my_list.append(98)
      >>> my_list.append(6)
      >>> my_list.append(-2)
      >>> my_list.append(-1)
      >>> my_list.append(3)
      >>> my_list.append(1)
      >>> print(my_list)
      [2, 98, 6, -2, -1, 3, 1]

      >>> my_list.print_sorted()
      [-2, -1, 1, 2, 3, 6, 98]

All negative numbers:
    >>> my_list = MyList()
    >>> my_list.append(-4)
    >>> my_list.append(-6)
    >>> my_list.append(-9)
    >>> my_list.append(-5)
    >>> print(my_list)
    [-4, -6, -9, -5]

    >>> my_list.print_sorted()
    [-9, -6, -5, -4]


Checking for handling of too many arguments:
	 >>> my_list.print_sorted(8)
	 Traceback (most recent call last):
	 ...
	 TypeError: print_sorted() takes 1 positional argument but 2 were given
